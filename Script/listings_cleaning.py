# -*- coding: utf-8 -*-
"""listings_cleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1urlzlBN8FlQ3VG63LRF6fpYVZwyyf4ij
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import files

"""**Listings Data Frame**"""

# Cargar archivo csv
df_listings = pd.read_csv('/content/listings.csv', encoding="utf-8", on_bad_lines="skip")
print(df_listings.columns)

# Eliminar columnas no necesarias
df_listings = df_listings.drop(['listing_url', 'scrape_id', 'last_scraped', 'source', 'neighborhood_overview', 'picture_url', 'host_url', 'host_name',
                                'host_since', 'host_location', 'host_about', 'availability_30', 'host_thumbnail_url', 'host_picture_url', 'host_neighbourhood',
                                'host_listings_count', 'neighbourhood', 'neighbourhood_group_cleansed', 'property_type', 'bathrooms_text',
                                'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'host_has_profile_pic', 'host_identity_verified',
                                'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability',
                                'calendar_last_scraped', 'first_review', 'last_review', 'license', 'calculated_host_listings_count_entire_homes',
                                'host_response_time', 'host_acceptance_rate', 'host_total_listings_count', 'host_verifications', 'host_is_superhost',
                                'host_id', 'availability_60', 'availability_90', 'number_of_reviews_l30d', 'host_response_rate', 'calculated_host_listings_count_entire_homes',
                                'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'reviews_per_month', 'review_scores_accuracy',
                                'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value'], axis=1)

# Resumen general
def resumen_dataframe(df):
    resumen = pd.DataFrame({
        'Tipo de Dato': df.dtypes,
        'Valores Únicos': df.nunique(),
        'Valores NA': df.isna().sum(),
        'Porcentaje NA (%)': (df.isna().sum() / len(df)) * 100,
        'Primeros 5 Valores': df.apply(lambda x: list(x.unique()[:5]))
    })
    return resumen

resumen = resumen_dataframe(df_listings)
print(resumen)
print(df_listings.columns)

"""Limpieza y Manejo de datos"""

# Imputar valores "desconocidos" en texto para 'description'
df_listings["description"].fillna("Unknown", inplace=True)

# Imputar bathrooms, bedrooms y beds con la mediana por zona y tipo de habitación
cols_to_impute = ["bathrooms", "bedrooms", "beds"]

for col in cols_to_impute:
    df_listings[col] = df_listings.groupby(["neighbourhood_cleansed", "room_type"])[col].transform(lambda x: x.fillna(x.median()))

# Rellenar los puntajes de reseñas con la media por zona y tipo de habitación
    df_listings["review_scores_rating"] = df_listings.groupby(["neighbourhood_cleansed", "room_type"])["review_scores_rating"].transform(lambda x: x.fillna(x.mean()))

# Eliminar cualquier fila que aún tenga NA
df_listings = df_listings.dropna()

# Verificar
resumen = resumen_dataframe(df_listings)
print(resumen)

# Convertir 'price' a tipo numerico
df_listings["price"] = df_listings["price"].replace({'\$': '', ',': ''}, regex=True)
df_listings["price"] = pd.to_numeric(df_listings["price"], errors="coerce")

# Crear un boxplot para 'price'
plt.figure(figsize=(18, 6))
plt.subplot(1, 3, 2)
plt.boxplot(df_listings['price'], vert=False)
plt.title('Boxplot de Price')
plt.xlabel('Price')
plt.tight_layout()
plt.show()

# Calcular el rango intercuartílico para 'price'
Q1_price = df_listings['price'].quantile(0.25)
Q3_price = df_listings['price'].quantile(0.75)
IQR_price = Q3_price - Q1_price

# Definir límites
upper_limit_price = Q3_price + 3 * IQR_price

# Filtrar el DataFrame para eliminar esos outliers
df_cleaned = df_listings[
    (df_listings['price'] <= upper_limit_price)
]

# Verificar
print("Tamaño original:", df_listings.shape)
print("Tamaño después de eliminar outliers:", df_cleaned.shape)

"""**Creacion de Metricas Clave**"""

# Dias Rentados por Año
df_cleaned["dias_rentados"] = 365 - df_cleaned["availability_365"]

# Ganancia Anual Estimada
df_cleaned["ganancia_anual"] = df_cleaned["price"] * df_cleaned["dias_rentados"]

# Tasa de Ocupación
df_cleaned["tasa_de_ocupacion"] = 1 - (df_cleaned["availability_365"] / 365)

# Total de Amenidades
df_cleaned["total_amenities"] = df_cleaned["amenities"].apply(len)

# Rentabilidad por Dia
df_cleaned["rentabilidad_dia"] = df_cleaned["ganancia_anual"] / df_cleaned["dias_rentados"]

# Rentabilidad por Amenidad
df_cleaned["rentabilidad_amenidad"] = df_cleaned["ganancia_anual"] / df_cleaned["total_amenities"]

# Índice de Demanda (Ocupación Ajustada)
df_cleaned["indice_demanda"] = df_cleaned["tasa_de_ocupacion"] / df_cleaned["availability_365"]

# Guardar el DataFrame limpio en CSV
df_cleaned.to_csv('airbnb_cleaned.csv')

from google.colab import files
files.download('airbnb_cleaned.csv')